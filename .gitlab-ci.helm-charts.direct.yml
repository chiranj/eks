# This file defines the child pipeline for Helm chart installations
# It will be included by the parent pipeline after Terraform has created the infrastructure

stages:
  - prerequisites
  - storage
  - networking
  - observability
  - scaling
  - security

# These variables are populated from the parent pipeline's terraform-outputs.env file
variables:
  KUBECONFIG: ./kubeconfig

# Setup kubectl configuration for all subsequent jobs
setup-kubeconfig:
  stage: prerequisites
  script:
    - echo "Setting up kubectl configuration for cluster $CLUSTER_NAME"
    - aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION --kubeconfig ./kubeconfig
    - kubectl get nodes -o wide
  artifacts:
    paths:
      - ./kubeconfig
    expire_in: 1 day

# Storage Add-ons
ebs-csi-driver-install:
  stage: storage
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing EBS CSI Driver with role ARN: $EBS_CSI_DRIVER_ROLE_ARN"
    - |
      if [ -n "$EBS_CSI_DRIVER_ROLE_ARN" ]; then
        helm upgrade --install aws-ebs-csi-driver aws-ebs-csi-driver/aws-ebs-csi-driver \
          --namespace kube-system \
          --set controller.serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$EBS_CSI_DRIVER_ROLE_ARN
        echo "EBS CSI Driver installation complete"
      else
        echo "Skipping EBS CSI Driver installation - role ARN not provided"
      fi
  rules:
    - if: $EBS_CSI_DRIVER_ROLE_ARN

efs-csi-driver-install:
  stage: storage
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing EFS CSI Driver with role ARN: $EFS_CSI_DRIVER_ROLE_ARN"
    - |
      if [ -n "$EFS_CSI_DRIVER_ROLE_ARN" ]; then
        helm upgrade --install aws-efs-csi-driver aws-efs-csi-driver/aws-efs-csi-driver \
          --namespace kube-system \
          --set controller.serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$EFS_CSI_DRIVER_ROLE_ARN
        echo "EFS CSI Driver installation complete"
      else
        echo "Skipping EFS CSI Driver installation - role ARN not provided"
      fi
  rules:
    - if: $EFS_CSI_DRIVER_ROLE_ARN

# Networking Add-ons
aws-load-balancer-controller-install:
  stage: networking
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing AWS Load Balancer Controller with role ARN: $AWS_LOAD_BALANCER_CONTROLLER_ROLE_ARN"
    - |
      if [ -n "$AWS_LOAD_BALANCER_CONTROLLER_ROLE_ARN" ]; then
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update
        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
          --namespace kube-system \
          --set clusterName=$CLUSTER_NAME \
          --set serviceAccount.create=true \
          --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$AWS_LOAD_BALANCER_CONTROLLER_ROLE_ARN
        echo "AWS Load Balancer Controller installation complete"
      else
        echo "Skipping AWS Load Balancer Controller installation - role ARN not provided"
      fi
  rules:
    - if: $AWS_LOAD_BALANCER_CONTROLLER_ROLE_ARN

external-dns-install:
  stage: networking
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing External DNS with role ARN: $EXTERNAL_DNS_ROLE_ARN"
    - |
      if [ -n "$EXTERNAL_DNS_ROLE_ARN" ]; then
        helm repo add external-dns https://kubernetes-sigs.github.io/external-dns/
        helm repo update
        helm upgrade --install external-dns external-dns/external-dns \
          --namespace external-dns \
          --create-namespace \
          --set provider=aws \
          --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$EXTERNAL_DNS_ROLE_ARN
        echo "External DNS installation complete"
      else
        echo "Skipping External DNS installation - role ARN not provided"
      fi
  rules:
    - if: $EXTERNAL_DNS_ROLE_ARN

nginx-ingress-install:
  stage: networking
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing NGINX Ingress Controller with role ARN: $NGINX_INGRESS_ROLE_ARN"
    - |
      if [ -n "$NGINX_INGRESS_ROLE_ARN" ]; then
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update
        helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
          --namespace ingress-nginx \
          --create-namespace \
          --set controller.serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$NGINX_INGRESS_ROLE_ARN
        echo "NGINX Ingress Controller installation complete"
      else
        echo "Skipping NGINX Ingress Controller installation - role ARN not provided"
      fi
  rules:
    - if: $NGINX_INGRESS_ROLE_ARN

# Observability Add-ons
prometheus-install:
  stage: observability
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing Prometheus with role ARN: $PROMETHEUS_ROLE_ARN"
    - |
      if [ -n "$PROMETHEUS_ROLE_ARN" ]; then
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        helm upgrade --install prometheus prometheus-community/prometheus \
          --namespace prometheus \
          --create-namespace \
          --set server.serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$PROMETHEUS_ROLE_ARN
        echo "Prometheus installation complete"
      else
        echo "Skipping Prometheus installation - role ARN not provided"
      fi
  rules:
    - if: $PROMETHEUS_ROLE_ARN

adot-install:
  stage: observability
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing AWS Distro for OpenTelemetry with role ARN: $ADOT_ROLE_ARN"
    - |
      if [ -n "$ADOT_ROLE_ARN" ]; then
        helm repo add aws-otel https://aws-observability.github.io/helm-charts
        helm repo update
        helm upgrade --install adot aws-otel/adot-collector \
          --namespace adot \
          --create-namespace \
          --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$ADOT_ROLE_ARN
        echo "AWS Distro for OpenTelemetry installation complete"
      else
        echo "Skipping AWS Distro for OpenTelemetry installation - role ARN not provided"
      fi
  rules:
    - if: $ADOT_ROLE_ARN

fluent-bit-install:
  stage: observability
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing Fluent Bit with role ARN: $FLUENT_BIT_ROLE_ARN"
    - |
      if [ -n "$FLUENT_BIT_ROLE_ARN" ]; then
        helm repo add fluent https://fluent.github.io/helm-charts
        helm repo update
        helm upgrade --install fluent-bit fluent/fluent-bit \
          --namespace fluent-bit \
          --create-namespace \
          --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$FLUENT_BIT_ROLE_ARN
        echo "Fluent Bit installation complete"
      else
        echo "Skipping Fluent Bit installation - role ARN not provided"
      fi
  rules:
    - if: $FLUENT_BIT_ROLE_ARN

# Scaling Add-ons
karpenter-install:
  stage: scaling
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing Karpenter with role ARN: $KARPENTER_ROLE_ARN"
    - |
      if [ -n "$KARPENTER_ROLE_ARN" ]; then
        helm repo add karpenter https://charts.karpenter.sh
        helm repo update
        helm upgrade --install karpenter karpenter/karpenter \
          --namespace karpenter \
          --create-namespace \
          --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$KARPENTER_ROLE_ARN \
          --set settings.aws.clusterName=$CLUSTER_NAME \
          --set settings.aws.defaultInstanceProfile=KarpenterNodeInstanceProfile-$CLUSTER_NAME
        echo "Karpenter installation complete"
      else
        echo "Skipping Karpenter installation - role ARN not provided"
      fi
  rules:
    - if: $KARPENTER_ROLE_ARN

cluster-autoscaler-install:
  stage: scaling
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing Cluster Autoscaler with role ARN: $CLUSTER_AUTOSCALER_ROLE_ARN"
    - |
      if [ -n "$CLUSTER_AUTOSCALER_ROLE_ARN" ]; then
        helm repo add autoscaler https://kubernetes.github.io/autoscaler
        helm repo update
        helm upgrade --install cluster-autoscaler autoscaler/cluster-autoscaler \
          --namespace kube-system \
          --set autoDiscovery.clusterName=$CLUSTER_NAME \
          --set rbac.serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$CLUSTER_AUTOSCALER_ROLE_ARN
        echo "Cluster Autoscaler installation complete"
      else
        echo "Skipping Cluster Autoscaler installation - role ARN not provided"
      fi
  rules:
    - if: $CLUSTER_AUTOSCALER_ROLE_ARN

keda-install:
  stage: scaling
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing KEDA with role ARN: $KEDA_ROLE_ARN"
    - |
      if [ -n "$KEDA_ROLE_ARN" ]; then
        helm repo add kedacore https://kedacore.github.io/charts
        helm repo update
        helm upgrade --install keda kedacore/keda \
          --namespace keda \
          --create-namespace \
          --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$KEDA_ROLE_ARN
        echo "KEDA installation complete"
      else
        echo "Skipping KEDA installation - role ARN not provided"
      fi
  rules:
    - if: $KEDA_ROLE_ARN

# Security Add-ons
cert-manager-install:
  stage: security
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing Cert Manager with role ARN: $CERT_MANAGER_ROLE_ARN"
    - |
      if [ -n "$CERT_MANAGER_ROLE_ARN" ]; then
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
        helm upgrade --install cert-manager jetstack/cert-manager \
          --namespace cert-manager \
          --create-namespace \
          --set installCRDs=true \
          --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$CERT_MANAGER_ROLE_ARN
        echo "Cert Manager installation complete"
      else
        echo "Skipping Cert Manager installation - role ARN not provided"
      fi
  rules:
    - if: $CERT_MANAGER_ROLE_ARN

secrets-manager-install:
  stage: security
  needs:
    - setup-kubeconfig
  script:
    - echo "Installing AWS Secrets Manager CSI Driver with role ARN: $SECRETS_MANAGER_ROLE_ARN"
    - |
      if [ -n "$SECRETS_MANAGER_ROLE_ARN" ]; then
        helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
        helm repo update
        helm upgrade --install secrets-store-csi-driver secrets-store-csi-driver/secrets-store-csi-driver \
          --namespace kube-system
        
        helm repo add aws-secrets-manager https://aws.github.io/secrets-store-csi-driver-provider-aws
        helm upgrade --install aws-secrets-manager aws-secrets-manager/secrets-store-csi-driver-provider-aws \
          --namespace kube-system \
          --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$SECRETS_MANAGER_ROLE_ARN
        echo "AWS Secrets Manager CSI Driver installation complete"
      else
        echo "Skipping AWS Secrets Manager CSI Driver installation - role ARN not provided"
      fi
  rules:
    - if: $SECRETS_MANAGER_ROLE_ARN