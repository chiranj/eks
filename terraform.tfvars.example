# Example terraform.tfvars file
# Copy this to terraform.tfvars and modify as needed

# Cluster configuration
region         = "us-east-1"
cluster_name   = "eks-prod"
cluster_version = "1.29"

# VPC configuration (use existing VPC)
vpc_mode      = "existing"
vpc_id        = "vpc-01234567890abcdef"
subnet_ids    = ["subnet-01234567890abcdef", "subnet-01234567890abcdef", "subnet-01234567890abcdef"]
control_plane_subnet_ids = ["subnet-01234567890abcdef", "subnet-01234567890abcdef", "subnet-01234567890abcdef"]

# Node group configuration
eks_managed_node_groups = {
  default = {
    name = "default-node-group"
    instance_types = ["m5.large"]
    capacity_type  = "ON_DEMAND"
    min_size     = 2
    max_size     = 5
    desired_size = 2
    labels = {
      Environment = "prod"
      Role        = "general"
    }
    # Uncomment to override the default EKS-optimized AMI for this specific node group
    # ami_id = "ami-0123456789abcdef0"
    
    # EKS 1.29+ supports node update configuration to minimize disruption
    # update_config = {
    #   max_unavailable_percentage = 33  # OR max_unavailable = 1
    # }
    
    # EKS 1.29+ supports node repair configuration
    # node_repair_config = {
    #   enabled = true
    # }
  }
}

# Optional: Custom AMI ID for all node groups (can be overridden per node group)
# node_group_ami_id = "ami-0123456789abcdef0"

# Access configuration - new in EKS module v20 (Optional)
# eks_access_entries = {
#   # Example role with admin access
#   admin-role = {
#     principal_arn = "arn:aws:iam::123456789012:role/eks-admin"
#     policy_associations = {
#       admin = {
#         policy_arn = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
#         access_scope = {
#           type = "cluster"
#         }
#       }
#     }
#   }
# }

# Add-ons configuration
enable_aws_load_balancer_controller = true
node_scaling_method                 = "karpenter"  # "karpenter", "cluster_autoscaler", or "none"
enable_keda                         = true
enable_external_dns                 = true
enable_prometheus                   = true
enable_secrets_manager              = true
enable_cert_manager                 = true
enable_nginx_ingress                = true
enable_adot                         = true
enable_fluent_bit                   = true
enable_ebs_csi_driver               = true
enable_efs_csi_driver               = false

# External DNS configuration (if enabled)
external_dns_hosted_zone_source     = "existing"  # "existing" or "create"
external_dns_existing_hosted_zone_id = "Z1234567890ABCDEFGHIJK"  # Required if external_dns_hosted_zone_source is "existing"
external_dns_domain                 = "example.com"  # Required if external_dns_hosted_zone_source is "create"

# GitLab integration (for Kubernetes components installation)
trigger_gitlab_pipeline = true
gitlab_project_id       = "12345678"  # GitLab project ID for pipeline triggering
gitlab_pipeline_ref     = "main"      # GitLab pipeline reference (branch/tag)
gitlab_aws_role_arn     = "arn:aws:iam::123456789012:role/MyCustomEksDeploymentRole" # IAM role ARN to assume during deployment

# Tags
tags = {
  Environment = "production"
  ManagedBy   = "terraform"
  Project     = "eks-cluster"
}