stages:
  - validate
  - apply-eks
  - apply-full
  - helm-charts
  - destroy

variables:
  TF_ROOT: ${CI_PROJECT_DIR}
  AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
  TF_CLI_ARGS: "-no-color" # Improves output readability in GitLab CI
  # Default State name - can be overridden by users
  TF_STATE_NAME: ${CLUSTER_NAME:-default}-eks-cluster
  
  # Set all add-on variables to false by default
  # Users will override these in their pipeline
  ENABLE_AWS_LOAD_BALANCER_CONTROLLER: "false"
  ENABLE_KEDA: "false"
  ENABLE_EXTERNAL_DNS: "false"
  ENABLE_PROMETHEUS: "false"
  ENABLE_SECRETS_MANAGER: "false"
  ENABLE_CERT_MANAGER: "false"
  ENABLE_NGINX_INGRESS: "false"
  ENABLE_ADOT: "false"
  ENABLE_FLUENT_BIT: "false"
  # Storage add-ons
  ENABLE_EBS_CSI_DRIVER: "true"  # Enabled by default
  ENABLE_EFS_CSI_DRIVER: "false"
  NODE_SCALING_METHOD: "none"

# Default configuration - can be overridden in child pipelines
default:
  image: 
    name: hashicorp/terraform:1.5.0
    entrypoint: [""]
  cache:
    key: "${CI_COMMIT_REF_SLUG}-${CLUSTER_NAME}"
    paths:
      - ${TF_ROOT}/.terraform
  before_script:
    - cd ${TF_ROOT}
    - terraform --version
    - |
      # Install AWS CLI if not already available
      if ! [ -x "$(command -v aws)" ]; then
        apk add --no-cache aws-cli jq
      fi
      
      # Get caller identity to verify authentication
      echo "AWS identity:"
      aws sts get-caller-identity
      
      # Generate tfvars file from environment variables
      cat > terraform.auto.tfvars <<EOL
      # Auto-generated from GitLab CI/CD variables
      cluster_name = "${CLUSTER_NAME}"
      region = "${AWS_DEFAULT_REGION}"
      
      # VPC Configuration
      vpc_mode = "${VPC_MODE:-existing}"
      vpc_id = "${VPC_ID}"
      subnet_ids = ${SUBNET_IDS}
      control_plane_subnet_ids = ${CONTROL_PLANE_SUBNET_IDS}
      
      # Node Configuration
      cluster_version = "${CLUSTER_VERSION:-1.29}"
      
      # Add-on Configuration
      enable_aws_load_balancer_controller = ${ENABLE_AWS_LOAD_BALANCER_CONTROLLER}
      node_scaling_method = "${NODE_SCALING_METHOD}"
      enable_keda = ${ENABLE_KEDA}
      enable_external_dns = ${ENABLE_EXTERNAL_DNS}
      enable_prometheus = ${ENABLE_PROMETHEUS}
      enable_secrets_manager = ${ENABLE_SECRETS_MANAGER}
      enable_cert_manager = ${ENABLE_CERT_MANAGER}
      enable_nginx_ingress = ${ENABLE_NGINX_INGRESS}
      enable_adot = ${ENABLE_ADOT}
      enable_fluent_bit = ${ENABLE_FLUENT_BIT}
      
      # Storage add-ons
      enable_ebs_csi_driver = ${ENABLE_EBS_CSI_DRIVER}
      enable_efs_csi_driver = ${ENABLE_EFS_CSI_DRIVER}
      
      # External DNS Configuration
      external_dns_hosted_zone_source = "${EXTERNAL_DNS_HOSTED_ZONE_SOURCE:-existing}"
      external_dns_existing_hosted_zone_id = "${EXTERNAL_DNS_EXISTING_HOSTED_ZONE_ID}"
      external_dns_domain = "${EXTERNAL_DNS_DOMAIN}"
      
      # GitLab Integration
      trigger_gitlab_pipeline = ${TRIGGER_GITLAB_PIPELINE:-true}
      gitlab_token = "${GITLAB_TOKEN}"
      gitlab_project_id = "${GITLAB_PROJECT_ID}"
      gitlab_pipeline_ref = "${GITLAB_PIPELINE_REF:-main}"
      
      # Any additional variables from environment
      # This will be empty if no TF_VAR_* variables are set
      $(env | grep '^TF_VAR_' | sed 's/^TF_VAR_//' | sed 's/=/ = "/' | sed 's/$/"/')
      EOL
    - |
      # Initialize Terraform with GitLab-managed state
      terraform init \
        -backend=true \
        -backend-config="address=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}" \
        -backend-config="lock_address=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}/lock" \
        -backend-config="unlock_address=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}/lock" \
        -backend-config="username=${GITLAB_USER_LOGIN}" \
        -backend-config="password=${CI_JOB_TOKEN}" \
        -backend-config="lock_method=POST" \
        -backend-config="unlock_method=DELETE" \
        -backend-config="retry_wait_min=5"

# Validation job
validate:
  stage: validate
  script:
    - terraform validate
    - terraform fmt -check -recursive
  allow_failure: true # Continue even if validation fails due to circular dependencies

# OIDC provider and role stage removed - users must provide a GitLab role ARN

# Step 2: Apply EKS cluster module
apply_eks:
  stage: apply-eks
  script:
    - echo "Applying EKS cluster module..."
    - terraform apply -target=module.eks_cluster -auto-approve
  dependencies:
    - validate

# Step 3: Apply all remaining resources
apply_full:
  stage: apply-full
  script:
    - echo "Applying all remaining resources..."
    - terraform apply -parallelism=1 -auto-approve
    - |
      # Copy terraform-outputs.env to the artifacts directory
      ENV_FILE=$(terraform output -raw gitlab_integration_env_file_path 2>/dev/null || echo "")
      JSON_FILE=$(terraform output -raw gitlab_integration_json_file_path 2>/dev/null || echo "")
      
      if [ -n "$ENV_FILE" ] && [ -f "$ENV_FILE" ]; then
        cp "$ENV_FILE" terraform-outputs.env
        echo "Copied $ENV_FILE to terraform-outputs.env"
        cat terraform-outputs.env
      else
        echo "Warning: terraform-outputs.env file not found or output not available"
      fi
      
      if [ -n "$JSON_FILE" ] && [ -f "$JSON_FILE" ]; then
        cp "$JSON_FILE" terraform-outputs.json
        echo "Copied $JSON_FILE to terraform-outputs.json"
      else
        echo "Warning: terraform-outputs.json file not found or output not available"
      fi
  dependencies:
    - apply_eks
  artifacts:
    paths:
      - terraform-outputs.env
      - terraform-outputs.json
    reports:
      dotenv: terraform-outputs.env

# Helm charts installation using child pipeline
helm_charts:
  stage: helm-charts
  needs:
    - apply_full
  trigger:
    include: 
      - local: '.gitlab-ci.helm-charts.yml'
    strategy: depend
  variables:
    # Pass the cluster name and other key variables to the child pipeline
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    # All other variables from terraform-outputs.env will be available automatically
    # because of the dotenv artifact in the apply_full job

# Destroy all resources
destroy:
  stage: destroy
  script:
    - terraform destroy -auto-approve
  when: manual
  environment:
    name: ${CLUSTER_NAME:-default}
    action: stop

# Templates for child pipelines to include this file
.include_template:
  # Example in child pipelines:
  # include:
  #   - project: 'your-org/eks-module'
  #     ref: main
  #     file: '.gitlab-ci.yml'
  #
  # Variables to set in child pipelines:
  # variables:
  #   CLUSTER_NAME: "my-eks-cluster"
  #   VPC_ID: "vpc-12345"
  #   SUBNET_IDS: '["subnet-123", "subnet-456", "subnet-789"]'
  #   ENABLE_AWS_LOAD_BALANCER_CONTROLLER: "true"
  #   ENABLE_EXTERNAL_DNS: "true"
  #   EXTERNAL_DNS_HOSTED_ZONE_SOURCE: "existing"
  #   EXTERNAL_DNS_EXISTING_HOSTED_ZONE_ID: "Z1234567890"
  #   NODE_SCALING_METHOD: "karpenter"
  #   ENABLE_KEDA: "true"
  #
  # Or create a terraform.tfvars file with these settings